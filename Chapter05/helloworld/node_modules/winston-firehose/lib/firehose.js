'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var winston = require('winston');
var AWS = require('aws-sdk');
var Promise = require('bluebird');

AWS.config.setPromisesDependency(Promise);

var IFireHoser = exports.IFireHoser = function () {
  // eslint-disable-next-line no-useless-constructor, no-unused-vars

  function IFireHoser(streamName, firehoseOptions) {
    _classCallCheck(this, IFireHoser);
  }
  // new.target doesn't work with babel and nodejs <= 4.0.0
  // so leaving this out for now
  // if (new.target === IFireHoser) {
  //  throw new TypeError('Cannot construct Abstract instances directly');
  // }


  /**
   * @returns Promise containing the recordId
   */


  _createClass(IFireHoser, [{
    key: 'send',
    value: function send(message) {
      // eslint-disable-line no-unused-vars
      throw new Error('Not Implemented.');
    }
  }]);

  return IFireHoser;
}();

var FireHoser = exports.FireHoser = function (_IFireHoser) {
  _inherits(FireHoser, _IFireHoser);

  function FireHoser(streamName, firehoseOptions) {
    _classCallCheck(this, FireHoser);

    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(FireHoser).call(this, streamName, firehoseOptions));

    _this.streamName = streamName;
    _this.firehose = new AWS.Firehose(firehoseOptions || {});
    return _this;
  }

  /**
   * @returns Promise
   */


  _createClass(FireHoser, [{
    key: 'send',
    value: function send(message) {
      var params = {
        DeliveryStreamName: this.streamName,
        Record: {
          Data: message
        }
      };

      return this.firehose.putRecord(params).promise();
    }
  }]);

  return FireHoser;
}(IFireHoser);

var FirehoseLogger = exports.FirehoseLogger = function (_winston$Transport) {
  _inherits(FirehoseLogger, _winston$Transport);

  function FirehoseLogger(options) {
    _classCallCheck(this, FirehoseLogger);

    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(FirehoseLogger).call(this, options));

    _this2.name = 'FirehoseLogger';
    _this2.level = options.level || 'info';

    var streamName = options.streamName;
    var firehoseOptions = options.firehoseOptions || {};

    _this2.firehoser = options.firehoser || new FireHoser(streamName, firehoseOptions);
    return _this2;
  }

  _createClass(FirehoseLogger, [{
    key: 'log',
    value: function log(level, msg, meta, callback) {
      var message = {
        timestamp: new Date().toISOString(),
        level: level,
        message: msg,
        meta: meta
      };

      return this.firehoser.send(JSON.stringify(message)).then(function () {
        return callback(null, true);
      }, function (e) {
        callback(e, false);
        throw new Error(e);
      });
    }
  }]);

  return FirehoseLogger;
}(winston.Transport);